syntax = "proto3";

import "daemon/common.proto";
import "hyperdrive.proto";

// Cross-drive operations

/**
 * Create a session for a hyperdrive by key, version, and hash.
 */
message GetDriveRequest {
  HyperdriveOptions opts = 1; // Hyperdrive options.
}
message GetDriveResponse {
  uint64 id = 1; // A new session ID.
  HyperdriveOptions opts = 2; // Hyperdrive options.
}

/**
 * Get networking statistics across all drives.
 */
message StatsRequest {}
message StatsResponse {
  repeated DriveStats stats = 1;
}

/**
 * Get the list of drives that are being advertised.
 */
message ActiveRequest {}
message ActiveResponse {
  repeated HyperdriveOptions drives = 1;
}

// Session-specific operations

/**
 * Advertise a drive on the network.
 */
message PublishDriveRequest {
  uint64 id = 1; // A session ID.
}
message PublishDriveResponse {}

/**
 * Stop advertising a drive on the network.
 */
message UnpublishDriveRequest {
  uint64 id = 1; // A session ID.
}
message UnpublishDriveResponse {}

/**
 * Get networking statistics for a single drive.
 */
message DriveStatsRequest {
  uint64 id = 1; // A session ID.
}
message DriveStatsResponse {
  DriveStats stats = 1;
}

// Drive operations

/**
 * Write a file into a drive.
 */
message WriteFileRequest {
  uint64 id = 1; // A session ID.
  string path = 2; // The file path.
  bytes content = 3; // The file contents.
}
message WriteFileResponse {}

/**
 * Read a file from a drive.
 */
message ReadFileRequest {
  uint64 id = 1; // A session ID.
  string path = 2; // The file path.
}
message ReadFileResponse {
  bytes content = 1; // The file contents.
}

/**
 * Open a file descriptor.
 */
message OpenRequest {
  uint64 id = 1; // A session ID.
  string path = 2; // The file path.
  uint32 flags = 3; // File descriptor flags.
}
message OpenResponse {
  uint32 fd = 1; // A file descriptor that can be used in subsequent read/write operations.
}

// Hyperdrive.close (closes either a file descriptor or the whole drive).
message CloseRequest {
  uint64 id = 1;
  uint32 fd = 2;
}
message CloseResponse {
  uint32 fd = 1;
}

// Write to a FD previously opened with an OpenRequest.
message WriteRequest {
  uint64 id = 1;
  uint32 fd = 2;
  uint64 offset = 3;
  bytes contents = 4;
}
message WriteResponse {}

// Read from a FD previously opened with an OpenRequest.
message ReadRequest {
  uint64 id = 1;
  uint32 fd = 2;
  uint64 offset = 3;
  uint64 length = 4;
}
message ReadResponse {
  bytes content = 1;
}

// Hyperdrive.unlink
message UnlinkRequest {
  uint64 id = 1;
  uint64 path = 2;
}
message UnlinkResponse {}

// Hyperdrive.readdir
message ReadDirectoryRequest {
  uint64 id = 1;
  string path = 2;
  bool recursive = 3;
}
message ReadDirectoryResponse {
  repeated string files = 1;
}

// Hyperdrive.mkdir
message MkdirRequest {
  uint64 id = 1;
  string path = 2;
  uint64 mode = 3;
}
message MkdirResponse {}

// Hyperdrive.rmdir
message RmdirRequest {
  uint64 id = 1;
  string path = 2;
}
message RmdirResponse {}

// Hyperdrive.stat
message StatRequest {
  uint64 id = 1;
  string path = 2;
  bool lstat = 3;
}
message StatResponse {
  Stat stat = 1;
}

// Hyperdrive.watch
message WatchRequest {
  uint64 id = 1;
  string path = 2;
}
message WatchResponse {}

// Hyperdrive.mount
message MountDriveRequest {
  uint64 id = 1;
  string path = 2;
  Mount opts = 3;
}
message MountDriveResponse {}

message CloseSessionRequest {
  uint64 id = 1;
}
message CloseSessionResponse {}

service Drive {
  // Management methods
  rpc get (GetDriveRequest) returns (GetDriveResponse);
  rpc close (CloseSessionRequest) returns (CloseSessionResponse);
  rpc allStats (StatsRequest) returns (StatsResponse);

  // Session-specific operations
  rpc publish (PublishDriveRequest) returns (PublishDriveResponse);
  rpc unpublish (UnpublishDriveRequest) returns (UnpublishDriveResponse);
  rpc stats (DriveStatsRequest) returns (DriveStatsResponse);

  // Drive operations
  rpc open (OpenRequest) returns (OpenResponse);
  rpc read (stream ReadRequest) returns (stream ReadResponse);
  rpc write (stream WriteRequest) returns (stream WriteResponse);
  rpc writeFile (WriteFileRequest) returns (WriteFileResponse);
  rpc readFile (ReadFileRequest) returns (ReadFileResponse);
  rpc readdir (ReadDirectoryRequest) returns (ReadDirectoryResponse);
  rpc mkdir (MkdirRequest) returns (MkdirResponse);
  rpc rmdir (RmdirRequest) returns (RmdirResponse);
  rpc unlink (UnlinkRequest) returns (UnlinkResponse);
  rpc mount (MountDriveRequest) returns (MountDriveResponse);
  rpc stat (StatRequest) returns (StatResponse);
  rpc watch (WatchRequest) returns (stream WatchResponse);
}
 
